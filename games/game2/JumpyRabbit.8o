#Jumpy Rabbit
#Developed by Team 10, CMPT 276, SFU Spring 2019


##TODO:
# Make title screeen with difficulty choices
# Make enemy sprites
# Make enemies spawn depending on difficulty
# Vary speed (FPS LOCK) depending on difficulty
# Make game over, play again screen
# Possible TODO: Make 'pit' enemy rabbit can fall into
# Possible TODO: Make death animation for bunny


#### S P R I T E S ####
: floor 0x80 0x80
: playerSprite 0x80 0x40 0x60 0x70 0xC0 0x70
: playerSpriteJump 0x80 0x40 0x60 0xF0 0x20 0xC0
: groundEnemy 0x88 0x70 0xA8 0xF8 0x50 0x50

#Score Sprite
: score 0 0 0


#### R E G I S T E R - M A P ####
:alias playerYPos ve #Player Y Position
:alias playerFall vd #Player fall condition (0 - false, 1 true)
:alias enemy1XPos vc #Enemy1 x Position
:alias enemy2XPos vb
:alias enemy3XPos va
:alias scoreCount v9 #Score count
######## V3 and V4 USED IN SCORE!!!
#v0-v2 Will be used as Scratch Registers. Vf is used for Collision detection.


#### G A M E - C O N T R O L ####

#This function is used to create a delay
# MUST PASS v0 REGISTER FOR DELAY TIME
: delayTimer
	delay := v0
	loop
		vf := delay
		if vf != 0 then
	again
;

#Scorekeeping code used from John Earnest Octo project on github
#Must pass in scoreCount
: displayScore
	i := score
  #bcd splits a number into hundreds, tens, and ones into seq. memory
  bcd scoreCount
  
  #v3 and v4 set x & y positions
  v3 := 48
  v4 := 2
  i := score
  load v2 #load v0-v2 numbers
  
  i := hex v0 
  sprite v3 v4 5
  v3 += 5
  
  i := hex v1
  sprite v3 v4 5
  v3 += 5
  
  i := hex v2
  sprite v3 v4 5
;

#This checks if the bunny has passed an enemy obstacle if so
#It calls displayScore (to clear score) add 1 to scoreCount and then
#Re-call displayScore to update new score
: keepScore
	if enemy1XPos == 7 
  begin
  	displayScore
  	scoreCount += 1
    displayScore
  end
  
  if enemy2XPos == 7
  begin
  	displayScore
  	scoreCount += 1
    displayScore
  end
  
  if enemy3XPos == 7
    begin
  	displayScore
  	scoreCount += 1
    displayScore
  end
;


#Initializes a new round
: newRound
	#Set score to zero, and call keepScore to initialize score (of zero)
  scoreCount := 0
  displayScore
	#Make the floor
  v0 := 0
  v1 := 30
  i := floor
  loop
  	sprite v0 v1 2
    v0 += 1
    if v0 != 64 then
  again
   
	#Set player position and draw
  v0 := 10
  playerYPos := 24
  i := playerSprite
  sprite v0 playerYPos 6

	#Since this is a new round, set fall to FALSE
  playerFall := 0
;

#This checks if the player has hit the height of the jump, if so 
#Set playerFall to 1 and call clearSpriteJump
: checkPlayerFall
	if playerYPos == 12 
  begin
    playerFall := 1
    clearSpriteJump
  end
;

#This makes the player fall to the ground
: makePlayerFall
	#Store positions in temp registers
	v1 := playerYPos
  v1 += 1
  v2 := 10
  
  #Check that the player is not on the ground, if so redraw sprite
  if playerYPos != 24 begin
    i := playerSprite
    sprite v2 playerYPos 6
    playerYPos := v1
    sprite v2 playerYPos 6
  end
  
  #If the player has touched the ground, set playerFall to zero
  if playerYPos == 24 then playerFall := 0
;

#This should only be called when the player just
: clearSpriteJump
  	if playerYPos != 24 
    begin
    	v2 := 10
 			i := playerSpriteJump
      sprite v2 playerYPos 6
      i := playerSprite
      sprite v2 playerYPos 6
    end
;

#This detects many conditions and initiates a jump if conditions are met
: playerJump
	
	#Store playerYPos, and the x position in v2
	v1 := playerYPos
  v2 := 10
  
  #Detect up key. 5 = up (W on most emulators)
  v0  := 5
  if v0 key then v1 += -1
  
  #Detect if up key is not being held -> then call clearSpriteJump and set playerFall to true and break out
  if v0 -key 
  begin 
		clearSpriteJump
   	playerFall := 1
    return
 	end
  
  #Redraw sprite by deleting old one and redrawing in new position
  i := playerSprite
  
  #If the player is on the ground then delete nonjumping sprite, set i to next frame
  if playerYPos == 24 
  begin
  	sprite v2 playerYPos 6
  	i := playerSpriteJump
  end
  
  #If the player is not on the ground set sprite to jump sprite and delete old sprite.
  if playerYPos != 24
  begin
  	i := playerSpriteJump
    sprite v2 playerYPos 6
  end
  
  #Draw the sprite in the new position
  playerYPos := v1
  sprite v2 playerYPos 6
;

: spawnEnemies
	i := groundEnemy
	enemy1XPos := 59
  v1 := 24
  sprite enemy1XPos v1 6
  
;

: moveEnemies
	i := groundEnemy
	v1 := enemy1XPos
  v1 += -1
  v2 := 24
  
  sprite enemy1XPos v2 6
  sprite v1 v2 6
  enemy1XPos := v1
;

#Main Function
: main
	newRound
  
    spawnEnemies ################## TEMPORARRYYYY
  loop
  	#Next 3 lines refer to player jumping or falling
  	checkPlayerFall
    if playerFall == 0 then playerJump  
    if playerFall == 1 then makePlayerFall
    
    #Call keepscore
    keepScore
    
    #Move all enemies
    moveEnemies
    if vf != 0 
    begin
    	v0 := 255
      clear
      delayTimer ## TODO: GAME OVER SCREEN
    end
    
    
    #Fix FPS using delayTimer
    v0 := 1
    delayTimer
  again

;